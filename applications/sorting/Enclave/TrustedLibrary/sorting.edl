enclave {
  trusted {
    public void ecall_test_sanity(void);
    public void ecall_bucketsort_sanity(void);
    public void ecall_bitonicsort_sanity(uint64_t size);
    public void ecall_bitonic_ewb(uint64_t size);
    public void ecall_sort_perf(void);
    public void ecall_pageswap_with_crypt_perf(void);
    public void ecall_pageswap_perf(void);
    public void ecall_mergesplit_perf(void);
    public void ecall_mergesplit_compare(void);
    public void ecall_bitonic_perf(void);
  };

  untrusted {
    void ocall_FAIL();
    void ocall_print_string([in, string] const char *str);
    uint64_t ocall_measure_time();
    uint8_t* ocall_InitServer(uint64_t sizeOfT, uint64_t N_);
    void ocall_DeleteServer();
    void ocall_Read_Batch([in, count=chunkNum] uint64_t* offsets, [in, count=chunkNum] uint64_t* sizes, [out, count=totalSize] uint8_t* tmp, uint64_t chunkNum, uint64_t totalSize);
    void ocall_Read(uint64_t pos, uint64_t length, [out, count=length] uint8_t* page);
    void ocall_Write_Batch([in, count=chunkNum] uint64_t* offsets, [in, count=chunkNum] uint64_t* sizes, [in, count=totalSize] uint8_t* tmp, uint64_t chunkNum, uint64_t totalSize);
    void ocall_Write(uint64_t pos, uint64_t length, [in, count=length] const uint8_t* page);
  };
};
